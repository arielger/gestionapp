// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "./types"
  fileName     = "index.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

// --------------------------------------

model Organization {
  id                      Int                       @id @default(autoincrement())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  name                    String
  memberships             Membership[]
  Property                Property[]
  Contract                Contract[]
  Activity                Activity[]
  Payment                 Payment[]
  Client                  Client[]
  PropertyOwnerOnProperty PropertyOwnerOnProperty[]
  TenantOnContract        TenantOnContract[]
  PropertyOwnerOnContract PropertyOwnerOnContract[]
  Address                 Address[]
}

model Membership {
  id Int @id @default(autoincrement())

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  // TODO: Review when implementing invitations
  // // When the user joins, we will clear out the name and email and set the user.
  // invitedName  String?
  // invitedEmail String?

  @@unique([organizationId, userId])
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens      Token[]
  sessions    Session[]
  memberships Membership[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Property {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  id        Int                       @id @default(autoincrement())
  address   Address                   @relation(fields: [addressId], references: [id])
  addressId Int                       @unique
  owners    PropertyOwnerOnProperty[]
  contracts Contract[]
}

model Client {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  id                         Int                       @id @default(autoincrement())
  firstName                  String
  lastName                   String
  email                      String?
  properties                 PropertyOwnerOnProperty[]
  tenantRentContracts        TenantOnContract[]
  propertyOwnerRentContracts PropertyOwnerOnContract[]
  address                    Address?                  @relation(fields: [addressId], references: [id])
  addressId                  Int?
}

model PropertyOwnerOnProperty {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int

  @@id([clientId, propertyId])
}

enum ContractFeeType {
  PERCENTAGE
  FIXED
}

model Contract {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  id         Int                       @id @default(autoincrement())
  owners     PropertyOwnerOnContract[]
  tenants    TenantOnContract[]
  property   Property                  @relation(fields: [propertyId], references: [id])
  propertyId Int
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  activities Activity[]
  payments   Payment[]
  fee        Float
  feeType    ContractFeeType
}

model TenantOnContract {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int

  @@id([clientId, contractId])
}

model PropertyOwnerOnContract {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int

  @@id([clientId, contractId])
}

enum ActivityType {
  RENT
  RENT_FEE
  // used for activities with custom title / information
  CUSTOM
}

enum ActivityPersonType {
  OWNER
  TENANT
}

model Activity {
  id              Int                    @id @default(autoincrement())
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  date            DateTime               @default(now())
  organization    Organization           @relation(fields: [organizationId], references: [id])
  organizationId  Int
  amount          Float
  isDebit         Boolean
  type            ActivityType
  contract        Contract               @relation(fields: [contractId], references: [id])
  contractId      Int
  assignedTo      ActivityPersonType
  customDetailsId Int?                   @unique
  customDetails   ActivityCustomDetails?
  payment         Payment?               @relation(fields: [paymentId], references: [id])
  paymentId       Int?

  // Used to link to original activity
  // For payments it will link to the paid activity
  // For fees it will link to the activity that generated the fee
  originActivity    Activity?  @relation("RelatedActivity", fields: [originActivityId], references: [id])
  originActivityId  Int?
  relatedActivities Activity[] @relation("RelatedActivity")
}

model ActivityCustomDetails {
  id         Int      @id @default(autoincrement())
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int      @unique
  title      String
}

model Payment {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  items          Activity[]
  contract       Contract     @relation(fields: [contractId], references: [id])
  contractId     Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  street       String
  streetNumber Int
  // Subpremise -> distinguish individual units within a multi-unit building (piso y n√∫mero del edificio)
  subpremise   String?

  state      String
  city       String
  postalCode String?

  Client         Client[]
  Property       Property[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?
}
