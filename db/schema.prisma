// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "./types"
  fileName     = "index.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

// --------------------------------------

model Organization {
  id                         Int                          @id @default(autoincrement())
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  name                       String
  memberships                Membership[]
  Property                   Property[]
  Contract                   Contract[]
  Activity                   Activity[]
  ActivityCustomDetails      ActivityCustomDetails[]
  ActivityRentPaymentDetails ActivityRentPaymentDetails[]
  ActivityRentOwnerCredit    ActivityRentOwnerCredit[]
  Payment                    Payment[]
  Client                     Client[]
  PropertyOwnerOnProperty    PropertyOwnerOnProperty[]
  TenantOnContract           TenantOnContract[]
  PropertyOwnerOnContract    PropertyOwnerOnContract[]
  Address                    Address[]
}

model Membership {
  id Int @id @default(autoincrement())

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  // TODO: Review when implementing invitations
  // // When the user joins, we will clear out the name and email and set the user.
  // invitedName  String?
  // invitedEmail String?

  @@unique([organizationId, userId])
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens      Token[]
  sessions    Session[]
  memberships Membership[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Property {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  id        Int                       @id @default(autoincrement())
  address   Address                   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId Int                       @unique
  owners    PropertyOwnerOnProperty[]
  contracts Contract[]
}

model Client {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  id                         Int                       @id @default(autoincrement())
  firstName                  String
  lastName                   String
  email                      String?
  properties                 PropertyOwnerOnProperty[]
  tenantRentContracts        TenantOnContract[]
  propertyOwnerRentContracts PropertyOwnerOnContract[]
  address                    Address?                  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId                  Int?                      @unique
  phoneAreaCode              String?
  phoneNumber                String?
  identityDocNumber          Int?
}

model PropertyOwnerOnProperty {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  property   Property @relation(fields: [propertyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  propertyId Int

  @@id([clientId, propertyId])
}

enum ContractFeeType {
  PERCENTAGE
  FIXED
}

enum ContractUpdateType {
  INDEX_IPC
}

model Contract {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  id                    Int                       @id @default(autoincrement())
  owners                PropertyOwnerOnContract[]
  tenants               TenantOnContract[]
  property              Property                  @relation(fields: [propertyId], references: [id])
  propertyId            Int
  startDate             DateTime
  endDate               DateTime
  rentAmount            Float
  updateAmountType      ContractUpdateType?
  updateAmountFrequency Int?
  activities            Activity[]
  payments              Payment[]
  fee                   Float
  feeType               ContractFeeType
  amountUpdates         ContractAmountUpdate[]
}

enum ContractAmountUpdateStatus {
  INITIAL
  EXECUTED
}

enum ContractAmountUpdateType {
  // Used when we update the rents with the previous IPC value
  // (since we don't have yet the IPC value of the current month -> it's published at the middle of the month)
  PROVISIONAL
  FINAL
}

model ContractAmountUpdate {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())

  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int

  status     ContractAmountUpdateStatus
  // updates should be executed if current date is greater than their updateDate
  updateDate DateTime

  // When status is EXECUTED the following fields should be completed
  indexType           ContractAmountUpdateType?
  executedAt          DateTime?
  percentageVariation Float?
  previousRentAmount  Float?
  newRentAmount       Float?
}

model TenantOnContract {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int

  @@id([clientId, contractId])
}

model PropertyOwnerOnContract {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int

  @@id([clientId, contractId])
}

enum ActivityType {
  // rent activities
  RENT_DEBT
  RENT_PAYMENT
  RENT_OWNER_CREDIT

  // used for activities with custom title / information
  CUSTOM
}

enum ActivityPersonType {
  OWNER
  TENANT
}

model Activity {
  id             Int                @id @default(autoincrement())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  date           DateTime           @default(now())
  organization   Organization       @relation(fields: [organizationId], references: [id])
  organizationId Int
  // TO REVIEW: is Float the best type to store the amounts?
  // check PostgreSQL specific types
  amount         Float
  isDebit        Boolean
  type           ActivityType
  contract       Contract           @relation(fields: [contractId], references: [id])
  contractId     Int
  assignedTo     ActivityPersonType
  payment        Payment?           @relation(fields: [paymentId], references: [id])
  paymentId      Int?

  // Relations to activity details rows + relations included in those details

  // CUSTOM
  customDetails ActivityCustomDetails?

  // RENT_PAYMENT
  rentPaymentDetails            ActivityRentPaymentDetails?
  rentPaymentDebtPaidByActivity ActivityRentPaymentDetails? @relation("RentPaymentDebtActivity")

  // RENT_OWNER_CREDIT
  rentOwnerCreditDetails         ActivityRentOwnerCredit?
  rentOwnerCreditDebtActivity    ActivityRentOwnerCredit? @relation("RentOwnerCreditDebtActivity")
  rentOwnerCreditPaymentActivity ActivityRentOwnerCredit? @relation("RentOwnerCreditPaymentActivity")
}

model ActivityCustomDetails {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  id             Int          @id @default(autoincrement())
  activity       Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId     Int          @unique
  title          String
}

model ActivityRentPaymentDetails {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  id             Int          @id @default(autoincrement())
  activity       Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId     Int          @unique

  rentDebtActivity Activity @relation("RentPaymentDebtActivity", fields: [rentDebtId], references: [id])
  rentDebtId       Int      @unique
}

model ActivityRentOwnerCredit {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  id             Int          @id @default(autoincrement())
  activity       Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId     Int          @unique

  rentDebtActivity Activity @relation("RentOwnerCreditDebtActivity", fields: [rentDebtId], references: [id])
  rentDebtId       Int      @unique

  rentPaymentActivity Activity @relation("RentOwnerCreditPaymentActivity", fields: [rentPaymentId], references: [id])
  rentPaymentId       Int      @unique
}

model Payment {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  items          Activity[]
  contract       Contract     @relation(fields: [contractId], references: [id])
  contractId     Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  street       String
  streetNumber Int
  // Subpremise -> distinguish individual units within a multi-unit building (piso y número del edificio)
  subpremise   String?

  state      String
  city       String
  postalCode String?

  Client         Client[]
  Property       Property[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int
}
